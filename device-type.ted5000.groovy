/** *  TED5000 Device Type for SmartThings * *  Author: badgermanus@gmail.com *  Code: https://github.com/jwsf/device-type.ted5000 * * INSTALLATION * ========================================= * * 1) Connect to the web admin interface of your TED5000 (typically available *    at //TED5000 on your local network and make sure password protection *    is turned on for all access. See TED5000_Settings.png for an example * * 2) Configure your firewall so that the TED5000 is visible outside your home  *    network. This topic is beyond the scope of this code, but at the end you  *    should be able to connect to your TED5000 from outside your home network *    (your phone's browser is a good option for this if you turn off wifi. The *    URL will be in this format: * *              http://YOUR_IP:YOUR_PORT/api/LiveData.xml * *    Don't even think about proceeding until the above is working! *  * 3) Create a new device type (https://graph.api.smartthings.com/ide/devices) *     Name: TED5000 *     Author: badgermanus@gmail.com *     Capabilities: *         Energy Meter *         Polling *		   Power Meter *         Refresh * * 4) Create a new device (https://graph.api.smartthings.com/device/list) *     Name: Your Choice *     Device Network Id: Your Choice *     Type: TED5000 (should be the last option) *     Location: Choose the correct location *     Hub/Group: Leave blank * * 5) Update device preferences *     Click on the new device to see the details. *     Click the edit button next to Preferences *     Fill in your device access information - username, password & URL *      * Copyright (C) 2014 Jonathan Wilson  <badgermanus@gmail.com> * Permission is hereby granted, free of charge, to any person obtaining a copy of this  * software and associated documentation files (the "Software"), to deal in the Software  * without restriction, including without limitation the rights to use, copy, modify,  * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to  * permit persons to whom the Software is furnished to do so, subject to the following  * conditions: The above copyright notice and this permission notice shall be included  * in all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,  * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A  * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT  * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF  * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */  preferences {    input("url", "text", title: "URL", description: "The URL (including port number) of your TED5000 device (must be available to the public internet - example http://12.34.56.78:4444)", required: true)    input("usr", "email", title: "Username", description: "The username configured in Network Settings on your TED5000", required: true)    input("pass", "password", title: "Password", description: "The password configured in Network Settings on your TED5000", required: true)}metadata {	// simulator metadata	simulator {    }	// UI tile definitions	tiles {	    		valueTile(	"power",         			"device.power",         			width: 2,                     height: 2                 )         {            state(	"power",                    label:'${currentValue}',                     unit: 'Watts',                  	backgroundColors: [                      [value: 900, color: "green"],                      [value: 1000, color: "orange"],                      [value: 1200, color: "red"]                  	]                 )		}            valueTile(	"energy",                         "device.energy",                         unit:'KWH'                     )         {            state("energy",                    label:'${currentValue}',                   	unit: 'KWH'                 )		}        standardTile("refresh", "device.power") {			state "default", action:"refresh.refresh", icon:"st.secondary.refresh"		}		main(["power", "energy"])		details(["power", "energy", "refresh"])	}}def poll() {	doUpdate()}def refresh() {	doUpdate()}def doUpdate() {    // Build auth string    def auth = settings.usr + ":" + settings.pass	auth = auth.getBytes()    auth = auth.encodeBase64()    String authString = auth	// Build URL    def URL = settings.url + "/api/LiveData.xml"    log.debug "Connecting to " + URL        def params = [        uri: URL,        headers: [            'Authorization': "Basic ${authString}"        ]    ]        // This closure is called to parse the XML if it is successfully retrieved    def successClosure = { response ->    	log.debug "Request to TED5000 was successful"        def powerNow = response.data.Power.Total.PowerNow        def energy = response.data.Power.Total.PowerMTD      	log.debug "Sending event - power: $powerNow W and month-to-date: $energy KWH"   		sendEvent (name: "power", value: powerNow, unit:"W")        sendEvent (name: "energy", value: energy, unit:"KWH")	}        try {            // Get the XML from the TED5000    	httpGet(params,  successClosure)    } catch ( java.net.UnknownHostException e) {    	log.error "Unknown host - check the URL and PORT for your device"    	sendEvent name: "power", value: "Unknown host"   	} catch (java.net.NoRouteToHostException t) {    	log.error "No route to host - check the URL and PORT for your device " + URL    	sendEvent name: "power", value: "No route to host"    } catch (java.io.FileNotFoundException fnf) {    	log.error "File not found - check the URL and PORT for your device " + URL        sendEvent name: "power", value: "XML not found"    } catch (java.io.IOException e) {    	log.error "Authentication error - check USERNAME and PASSWORD. This can also occur if the TED5000 cannot be reached"        sendEvent name: "power", value: "Auth error"    } catch (any) {    	log.error "General error trying to connect to TED and retrieve data " URL    	sendEvent name: "power", value: "ERROR"    }}